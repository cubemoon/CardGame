// Generated by CoffeeScript 1.7.1
(function() {
  var ChrLevelAtrr, HeroLevelAtrr, Schema, attackTimePerKill, clone, fight, getAttack, getChrUpLevelExp, getClothesSilver, getDefence, getHp, getJewelrySilver, getKillModExp, getKillModSilver, getShoeSilver, getSpeed, getUpLevelExp, getUpLevelPower, getUpLevelSilver, getValueWithSpecielEquip, getValueWithStar, getWeaponSilver, i, inhibitionRatio, initPower, isInhibition, isPromotion, j, maxLevel, maxStarLevel, mongoose, ratio, recoverTime, _i;

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  mongoose.connect('mongodb://112.124.70.138:27017/liangshan');

  recoverTime = 15 * 60;

  attackTimePerKill = 5;

  initPower = 30;

  maxStarLevel = 5;

  maxLevel = 150;

  inhibitionRatio = 1.2;

  ratio = 0.9;

  isInhibition = function(a, b) {
    if ((a === 1 && b === 2) || (a === 2 && b === 3) || (a === 3 && b === 4) || (a === 4 && b === 1) || (a === 5 && b === 3)) {
      return true;
    } else {
      return false;
    }
  };

  isPromotion = function(a, b) {
    if (a === 1 && b === 3 || (a === 2 && b === 4) || (a === 3 && b === 2) || (a === 4 && b === 4) || (a === 5 && b === 1)) {
      return true;
    } else {
      return false;
    }
  };

  getValueWithStar = function(value, star) {
    return Math.floor(value * (1 + (star - 1) / (maxStarLevel - 1)));
  };

  getHp = function(level, star) {
    return getValueWithStar(100 + level * 20, star);
  };

  getAttack = function(level, star) {
    return getValueWithStar(getHp(level) / attackTimePerKill * 2, star);
  };

  getDefence = function(level, star) {
    return getValueWithStar(getHp(level) / attackTimePerKill, star);
  };

  getSpeed = function(level, star) {
    return getValueWithStar(level / 2, star);
  };

  getUpLevelPower = function(curLevel, star) {
    return getValueWithStar(Math.pow(curLevel, 1.235), star);
  };

  getUpLevelExp = function(curLevel, star) {
    return Math.floor(Math.pow(getUpLevelPower(curLevel, star) * 30, 1.4));
  };

  getKillModExp = function(modLevel, star) {
    return Math.floor(getUpLevelExp(modLevel, star) / getUpLevelPower(modLevel, star));
  };

  getUpLevelSilver = function(level, star) {
    return Math.floor(getUpLevelExp(level, star) * ratio);
  };

  getKillModSilver = function(modLevel, star) {
    return Math.floor(getKillModExp(modLevel, star) * ratio);
  };

  getWeaponSilver = function(level, star) {
    return Math.floor(getUpLevelSilver(level, star) * 0.3);
  };

  getClothesSilver = function(level, star) {
    return Math.floor(getUpLevelSilver(level, star) * 0.23);
  };

  getShoeSilver = function(level, star) {
    return Math.floor(getUpLevelSilver(level, star) * 0.2);
  };

  getJewelrySilver = function(level, star) {
    return Math.floor(getUpLevelSilver(level, star) * 0.27);
  };

  getValueWithSpecielEquip = function(curStarValue, nextStarValue) {
    return Math.floor((nextStarValue - curStarValue) * 0.8);
  };

  getChrUpLevelExp = function(level) {
    return Math.floor(getUpLevelExp(level, 5) * 3);
  };

  for (i = _i = 1; _i <= 100; i = ++_i) {
    j = 1;
  }

  clone = function(obj) {
    return JSON.parse(JOSN.stringify(obj));
  };


  /*
  mq:{front:{'1':{}},back:{}}
  back :  5 6 7 8
  front:  1 2 3 4
           vs
  front:  1 2 3 4
  back :  5 6 7 8
  
  fq: [{mskill:Number,mhp:Number,uskill:Number,uhp:Number}]
   */

  fight = function(me, u) {
    var f, fq;
    fq = [];
    i = 1;
    while (true) {
      if (me.queue[i] && u.queue[i]) {
        if (me.getSpeed(me.queue[i] >= me.getSpeed(u.front[i]))) {
          f = attack(me.queue[i], u.queue[i]);
        } else {
          f = attack(u.queue);
        }
        fq.push(f);
      }
      if (i > 4) {
        i = 1;
      } else {
        i++;
      }
    }
    return fq;
  };

  HeroLevelAtrr = mongoose.model('HeroLevelAtrr', new Schema(null, {
    strict: false
  }));

  ChrLevelAtrr = mongoose.model('ChrLevelAtrr', new Schema(null, {
    strict: false
  }));


  /*
  for i in [1..150]
    for j in [1..5]
      HeroLevelAtrr.create
        level:i
        star:j
        nextExp:getUpLevelExp(i,j)
        killModExp:getKillModExp(i,j)
    ChrLevelAtrr.create
      level:i
      nextExp:getChrUpLevelExp(i)
   */

  HeroLevelAtrr.find(function(err, data) {
    console.log(err);
    return console.log(data);
  });

}).call(this);

//# sourceMappingURL=formula.map
